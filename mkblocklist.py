#!/usr/bin/python

# mkblocklist.py: Turn the list of Unicode blocks into C data.

# Copyright (C) 2013-2017 Brian Raiter <breadbox@muppetlabs.com>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy,
# modify, merge, publish, distribute, sublicense, and/or sell copies
# of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import re
import sys

# This script parses the Blocks.txt file supplied by unicode.org which
# describes the major sections of Unicode characters, and transforms
# it directly into a C file containing an array initialization
# statement.

# A blockrange object corresponds to a single struct in the C array.
# start and end define the range of codepoints in the block
# (inclusively). name is the official name of the block.

class blockrange(object):
  def __init__(self, start, end, name):
    self.start = start
    self.end = end
    self.name = name

  def entry(self):
    return '{{{0},{1},"{2}"}}'.format(self.start, self.end, self.name)

# Attempt to extract the Unicode version string from the first line.

m = re.match(r'# Blocks-(\S+)\.txt', sys.stdin.readline())
if m:
  versionstring = '"' + m.group(1) + '"'
else:
  versionstring = '0'

# Read the Unicode block data file line by line (skipping over
# comments and blank lines), and extract from each line the name of the
# block and its codepoint range.

blocklist = []
for line in sys.stdin:
  m = re.match(r'([0-9A-F]+)\s*\.+\s*([0-9A-F]+)\s*;\s*(\S.*)', line)
  if m:
    start = int(m.group(1), 16)
    end = int(m.group(2), 16)
    name = m.group(3)
    blocklist.append(blockrange(start, end, name))

# Output the list of blocks as a C initialization statement.

sys.stdout.write(
    '/* This file is generated by mkblocklist.py. Do not edit directly. */\n')
sys.stdout.write('#include "data.h"\n')
sys.stdout.write('char const *unicodeversion = ' + versionstring + ';\n')
sys.stdout.write('blockinfo const blocklist[] = {\n')
for block in blocklist:
  sys.stdout.write(block.entry() + ',\n')
sys.stdout.write(
    '};\n'
    'int const blocklistsize = sizeof blocklist / sizeof *blocklist;\n')
